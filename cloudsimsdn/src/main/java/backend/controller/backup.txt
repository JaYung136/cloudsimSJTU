    @RequestMapping("/writeJsonFile")
    public String writeJsonFile() throws Exception {
        JSONObject obj1 = new JSONObject().put("name", "xxx").put("gender", "male").put("phone", "123");
        JSONObject obj2 = new JSONObject().put("name", "yyy").put("gender", "female").put("phone", "456");
        JSONArray array = new JSONArray();
        array.put(obj1).put(obj2);
        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("./test.json"),"UTF-8");
        osw.write(array.toString());
        osw.flush();//清空缓冲区，强制输出数据
        osw.close();//关闭输出流
        return array.toString();
    }

    @RequestMapping("/readJsonFile")
    public String readJsonFile(String req) throws Exception {
        String content = new String(Files.readAllBytes(Paths.get("./test.json")));
        JSONArray array = new JSONArray(content);
        @SuppressWarnings("unchecked")
        Iterator<Object> iter = array.iterator();
        while(iter.hasNext()){
            System.out.println(iter.next());
        }
        return array.toString();
    }

    @PostMapping("/uploadphysical")
    public ResultDTO uploadPhysical(MultipartFile file, HttpServletRequest req) throws IOException {
        System.out.println("上传物理拓扑文件");
        try {
            String InputOutput = System.getProperty("user.dir")+"\\InputOutput";
            System.out.println(InputOutput);
            file.transferTo(new File(InputOutput, file.getOriginalFilename() ));
            physicalf = "InputOutput/" + file.getOriginalFilename();
        }catch (IOException e){
            System.out.print(e.getMessage());
        }
        return ResultDTO.success("上传成功");
    }

    @PostMapping("/uploadvirtual")
    public ResultDTO uploadVirtual(MultipartFile file, HttpServletRequest req) throws IOException {
        System.out.println("上传虚拟拓扑文件");
        try {
            String InputOutput = System.getProperty("user.dir")+"\\InputOutput";
            System.out.println(InputOutput);
            file.transferTo(new File(InputOutput, file.getOriginalFilename() ));
            virtualf = "InputOutput/" + file.getOriginalFilename();
        }catch (IOException e){
            System.out.print(e.getMessage());
        }
        return ResultDTO.success("上传成功");
    }

    @PostMapping("/uploadworkload")
    public ResultDTO uploadWorkload(MultipartFile file, HttpServletRequest req) throws IOException {
        System.out.println("上传负载文件");
        try {
            String InputOutput = System.getProperty("user.dir")+"\\InputOutput";
            System.out.println(InputOutput);
            file.transferTo(new File(InputOutput, file.getOriginalFilename() ));
            workloadf = "InputOutput/" + file.getOriginalFilename();
        }catch (IOException e){
            System.out.print(e.getMessage());
        }
        return ResultDTO.success("上传成功");
    }
